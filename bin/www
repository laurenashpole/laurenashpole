#!/usr/bin/env node

/**
 * Module dependencies.
 */
var http = require('http');
var https = require('https');
var app = require('../app');
var debug = require('debug')('laurenashpole:server');
var ssl = require('../app/config/config')()['ssl'];
var credentials = setCredentials(ssl);

/**
 * Initialize servers.
 */
createHttpServer();
createHttpsServer(app, credentials);

/**
 * Create HTTP server.
 */
function createHttpServer (app) {
    var port = normalizePort('8080');

    var server = http.createServer(function (req, res) {
        res.writeHead(307, { 'Location': 'https://' + req.headers.host + req.url });
        res.end();
    });

    server.listen(port);
    server.on('error', onError.bind(null, port));
    server.on('listening', onListening.bind(null, server));
}

/**
 * Create HTTPS server.
 */
function createHttpsServer (app, credentials) {
    var port = normalizePort(process.env.PORT || '8443');
    app.set('port', port);

    var server = https.createServer(credentials, app);

    server.listen(port);
    server.on('error', onError.bind(null, port));
    server.on('listening', onListening.bind(null, server));
}

/**
 * Set SSL credentials.
 */
function setCredentials (ssl) {
    return {
        ca: ssl.ca,
        key: ssl.key,
        cert: ssl.cert
    };
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError (port, error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening (server) {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}