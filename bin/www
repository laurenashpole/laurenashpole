#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http');
const https = require('https');
const app = require('../app');
const debug = require('debug')('laurenashpole:server');
const ssl = require('../app/config/config')()['ssl'];
const credentials = setCredentials(ssl);

/**
 * Initialize servers.
 */
createHttpServer();
createHttpsServer(app, credentials);

/**
 * Create HTTP server.
 */
function createHttpServer (app) {
  const port = normalizePort('8080');

  const server = http.createServer(function (req, res) {
    res.writeHead(301, { 'Location': 'https://' + req.headers.host + req.url });
    res.end();
  });

  server.listen(port);
  server.on('error', onError.bind(null, port));
  server.on('listening', onListening.bind(null, server));
}

/**
 * Create HTTPS server.
 */
function createHttpsServer (app, credentials) {
  const port = normalizePort(process.env.PORT || '8443');
  app.set('port', port);

  const server = https.createServer(credentials, app);

  server.listen(port);
  server.on('error', onError.bind(null, port));
  server.on('listening', onListening.bind(null, server));
}

/**
 * Set SSL credentials.
 */
function setCredentials (ssl) {
  let cert = [];
  const ca = [];
  const chain = ssl.ca.split('\n');

  for (let i = 0; i < chain.length; i++) {
    if (chain[i].length !== 0) {
      cert.push(chain[i]);

      if (chain[i].match(/-END CERTIFICATE-/)) {
        ca.push(cert.join('\n'));
        cert = [];
      }
    }
  }

  return {
    ca: ca,
    key: ssl.key,
    cert: ssl.cert
  };
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError (port, error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening (server) {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}